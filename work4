#include <stdio.h>
#include <stdlib.h>

// 定義二元搜索樹的結點
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// 插入新節點的函數
struct Node* insert(struct Node* root, int key) {
    if (root == NULL) {
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = key;
        newNode->left = newNode->right = NULL;
        return newNode;
    }

    if (key < root->data)
        root->left = insert(root->left, key);
    else if (key > root->data)
        root->right = insert(root->right, key);

    return root;
}

// 中序遍歷印出結果的函數
void inorderTraversal(struct Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

int main() {
    struct Node* root = NULL;

    // 插入數值建立二元搜索樹
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

    // 中序遍歷印出結果
    printf("Inorder Traversal: ");
    inorderTraversal(root);

    return 0;
}
